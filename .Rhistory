# coef of sqft_basement is NA, and p-value of floor > 0.05
# R^2 = 0.6997, adR^2 = 0.6995
fit_drop_basement_floors <- lm(price~.-sqft_basement-floors, data = myD)
summary(fit_drop_basement_floors)
boxplot_p_sl
## boxplots for some high-correlated variables and price
boxplot_p_sl <- boxplot(price~sqft_living, data=myD,
main="Price vs. Sqft_living", xlab="Sqft_living", ylab="Price")
boxplot_p_b <- boxplot(price~bathrooms, data=myD,
col=(c("gold","darkgreen")),
main="Price vs. Bathrooms", xlab="Bathrooms", ylab="Price")
boxplot_p_g <- boxplot(price~grade, data=myD,
col=(c("gold","darkgreen")),
main="Price vs. Grade", xlab="Grade", ylab="Price")
boxplot_p_b <- boxplot(price~bathrooms, data=myD,
col=(c("gold","darkgreen")),
main="Price vs. Bathrooms", xlab="Bathrooms", ylab="Price")
## log price
log_price_model <- lm(log(price)~., data = myD)
summary(log_price_model)
## log price
log_price_model <- lm(log(price)~.-sqft_basement, data = myD)
summary(log_price_model)
# R^2 = 0.7704, adR^2 = 0.7703
result <- as.data.frame(round(best(log_price_model, nbest = 3), 4))
## log price
log_price_model <- lm(log(price)~.-sqft_basement, data = myD)
summary(log_price_model)
## log price
myD$logP <- log(myD$price)
## log price
myD$logP <- log(myD$price)
myD
myD <- myD[,-1]
log_price_model <- lm(logP~.-sqft_basement, data = myD)
summary(log_price_model)
# R^2 = 0.7704, adR^2 = 0.7703
result <- as.data.frame(round(best(log_price_model, nbest = 3), 4))
result <- result[order(-abs(result$adjr2)),]
head(result)
## wald test for view
fit.coef = summary(log_price_model)$coef
log_price_model <- lm(logP~.-sqft_basement, data = myD)
# Math 564 project
library(ggplot2)
library(reshape2)
library(MASS)
library(leaps)
##############################################
# helper functions
# get lower triangle of the matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# reorder the correlation values
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# select best model by adj R^2
best <- function(model, ...)
{
subsets <- regsubsets(formula(model), model.frame(model), ...)
subsets <- with(summary(subsets),
cbind(p = as.numeric(rownames(which)), which, adjr2))
return(subsets)
}
##############################################
##set up
# setwd("C:/Users/Jin/Desktop/MATH564Project")
myD<-read.csv("./kc_house_data.csv",stringsAsFactors = FALSE)
summary(myD)
str(myD)
#the data is pretty clean. No NAs and most of them are int/num.
#we can just drop the first two columns, id and dates.
myD <- myD[, -c(1,2)]
##correlations
# pair matrix without dates
cormat <- cor(myD)
round(cormat, 2)
melted_cormat <- melt(cormat)
cormat <- reorder_cormat(cormat)
upper_tri <- get_lower_tri(cormat)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# create correlation heatmap
ggheatmap <- ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# sqft_living, sqft_above and grades are highly related.
# price has high correlation with sqft_living, grade, sqft_above, sqft_living15, and bathrooms.
melted_cormat_byValue <- melted_cormat[order(abs(melted_cormat$value), decreasing = T),]
melted_cormat_byValue_price <- melted_cormat_byValue[melted_cormat_byValue$Var1=='price' |
melted_cormat_byValue$Var2=='price',]
## full linear model
full.model <- lm(price~., data = myD)
summary(full.model)
# coef of sqft_basement is NA, and p-value of floor > 0.05
# R^2 = 0.6997, adR^2 = 0.6995
fit_drop_basement_floors <- lm(price~.-sqft_basement-floors, data = myD)
summary(fit_drop_basement_floors)
# R^2 = 0.6997, adR^2 = 0.6995
## simplified model
sim_fit <- lm(price~sqft_living+grade+sqft_above+sqft_living15+bathrooms, data = myD)
summary(sim_fit)
# R^2 = 0.5442, adjR^2 = 0.5441
# select model by adjusted R^2
result <- as.data.frame(round(best(fit_drop_basement, nbest = 3), 4))
result <- result[order(-abs(result$adjr2)),]
head(result)
# So best model by adjusted R^2 is
# price ~ bedrooms + bathrooms + sqft_living + waterfront + view + grade + yr_built + lat
# top models by adjusted R^2 should contain
# sqft_living, waterfront, view, grade, yr_built and lat.
## boxplots for some high-correlated variables and price
boxplot_p_sl <- boxplot(price~sqft_living, data=myD,
main="Price vs. Sqft_living", xlab="Sqft_living", ylab="Price")
boxplot_p_b <- boxplot(price~bathrooms, data=myD,
col=(c("gold","darkgreen")),
main="Price vs. Bathrooms", xlab="Bathrooms", ylab="Price")
boxplot_p_g <- boxplot(price~grade, data=myD,
col=(c("gold","darkgreen")),
main="Price vs. Grade", xlab="Grade", ylab="Price")
#The relationship looks a bit non-linear here
## log price
myD$logP <- log(myD$price)
myD <- myD[,-1]
log_price_model <- lm(logP~.-sqft_basement, data = myD)
summary(log_price_model)
# R^2 = 0.7704, adR^2 = 0.7703
result <- as.data.frame(round(best(log_price_model, nbest = 3), 4))
result <- result[order(-abs(result$adjr2)),]
head(result)
# So best model by adjusted R^2 is
# logP ~ bathrooms + sqft_living + view + condition + grade + yr_built + lat + sqft_living15
# top models by adjusted R^2 should contain
# sqft_living, view, grade, yr_built, lat, and sqft_living15.
## model with second-order terms
second_order_fit <- NULL
## backward variable selection
model.null <- lm(price ~ 1, data = myD)
model.backward <- step(fit_drop_basement, scope = list(lower = model.null),
direction = "backward", test = "Chisq", data = myD, trace = F)
model.backward$formula
## wald test for view
fit.coef = summary(log_price_model)$coef
alpha = 0.05
zStar = fit.coef[4,1]/fit.coef[4,2]
zStar <= qnorm(1-alpha/2)
fit.coef[4,4]
## wald test for view
fit.coef = summary(log_price_model)$coef
alpha = 0.05
zStar = fit.coef[4,1]/fit.coef[4,2]
zStar <= qnorm(1-alpha/2)
fit.coef[4,4]
fit.coef
zStar = fit.coef[8,1]/fit.coef[8,2]
zStar <= qnorm(1-alpha/2)
fit.coef[4,4]
head(result)
head(result)
## wald test for view
fit.coef = summary(log_price_model)$coef
alpha = 0.05
zStar = fit.coef[8,1]/fit.coef[8,2]
zStar <= qnorm(1-alpha/2)
fit.coef[4,4]
sim_fit <- lm(price~sqft_living+grade+sqft_above+sqft_living15+bathrooms, data = myD)
summary(sim_fit)
# R^2 = 0.5442, adjR^2 = 0.5441
# select model by adjusted R^2
result_sim_fit <- as.data.frame(round(best(fit_drop_basement, nbest = 3), 4))
result_sim_fit <- result_sim_fit[order(-abs(result_sim_fit$adjr2)),]
head(result_sim_fit)
# R^2 = 0.5442, adjR^2 = 0.5441
# select model by adjusted R^2
result_sim_fit <- as.data.frame(round(best(fit_drop_basement, nbest = 3), 4))
# Math 564 project
library(ggplot2)
library(reshape2)
library(MASS)
library(leaps)
##############################################
# helper functions
# get lower triangle of the matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# reorder the correlation values
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# select best model by adj R^2
best <- function(model, ...)
{
subsets <- regsubsets(formula(model), model.frame(model), ...)
subsets <- with(summary(subsets),
cbind(p = as.numeric(rownames(which)), which, adjr2))
return(subsets)
}
##############################################
##set up
# setwd("C:/Users/Jin/Desktop/MATH564Project")
myD<-read.csv("./kc_house_data.csv",stringsAsFactors = FALSE)
summary(myD)
str(myD)
#the data is pretty clean. No NAs and most of them are int/num.
#we can just drop the first two columns, id and dates.
myD <- myD[, -c(1,2)]
##correlations
# pair matrix without dates
cormat <- cor(myD)
round(cormat, 2)
melted_cormat <- melt(cormat)
cormat <- reorder_cormat(cormat)
upper_tri <- get_lower_tri(cormat)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# create correlation heatmap
ggheatmap <- ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# sqft_living, sqft_above and grades are highly related.
# price has high correlation with sqft_living, grade, sqft_above, sqft_living15, and bathrooms.
melted_cormat_byValue <- melted_cormat[order(abs(melted_cormat$value), decreasing = T),]
melted_cormat_byValue_price <- melted_cormat_byValue[melted_cormat_byValue$Var1=='price' |
melted_cormat_byValue$Var2=='price',]
## full linear model
full.model <- lm(price~., data = myD)
summary(full.model)
# coef of sqft_basement is NA, and p-value of floor > 0.05
# R^2 = 0.6997, adR^2 = 0.6995
fit_drop_basement_floors <- lm(price~.-sqft_basement-floors, data = myD)
summary(fit_drop_basement_floors)
# R^2 = 0.6997, adR^2 = 0.6995
## simplified model
sim_fit <- lm(price~sqft_living+grade+sqft_above+sqft_living15+bathrooms, data = myD)
summary(sim_fit)
# R^2 = 0.5442, adjR^2 = 0.5441
# select model by adjusted R^2
result_sim_fit <- as.data.frame(round(best(fit_drop_basement, nbest = 3), 4))
# R^2 = 0.5442, adjR^2 = 0.5441
# select model by adjusted R^2
result_sim_fit <- as.data.frame(round(best(fit_drop_basement_floors, nbest = 3), 4))
result_sim_fit <- result_sim_fit[order(-abs(result_sim_fit$adjr2)),]
head(result_sim_fit)
## boxplots for some high-correlated variables and price
boxplot_p_sl <- boxplot(price~sqft_living, data=myD,
main="Price vs. Sqft_living", xlab="Sqft_living", ylab="Price")
boxplot_p_b <- boxplot(price~bathrooms, data=myD,
col=(c("gold","darkgreen")),
main="Price vs. Bathrooms", xlab="Bathrooms", ylab="Price")
boxplot_p_g <- boxplot(price~grade, data=myD,
col=(c("gold","darkgreen")),
main="Price vs. Grade", xlab="Grade", ylab="Price")
## log price
myD$logP <- log(myD$price)
## log price
myD$logP <- log(myD$price)
myD <- myD[,-1]
log_price_model <- lm(logP~.-sqft_basement, data = myD)
summary(log_price_model)
# R^2 = 0.7704, adR^2 = 0.7703
result_log <- as.data.frame(round(best(log_price_model, nbest = 3), 4))
result_log <- result_log[order(-abs(result_log$adjr2)),]
head(result_log)
# Math 564 project
library(ggplot2)
library(reshape2)
library(MASS)
library(leaps)
##############################################
# helper functions
# get lower triangle of the matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# reorder the correlation values
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# select best model by adj R^2
best <- function(model, ...)
{
subsets <- regsubsets(formula(model), model.frame(model), ...)
subsets <- with(summary(subsets),
cbind(p = as.numeric(rownames(which)), which, adjr2))
return(subsets)
}
##############################################
##set up
# setwd("C:/Users/Jin/Desktop/MATH564Project")
myD<-read.csv("./kc_house_data.csv",stringsAsFactors = FALSE)
summary(myD)
str(myD)
#the data is pretty clean. No NAs and most of them are int/num.
#we can just drop the first two columns, id and dates.
myD <- myD[, -c(1,2)]
##correlations
# pair matrix without dates
cormat <- cor(myD)
round(cormat, 2)
melted_cormat <- melt(cormat)
cormat <- reorder_cormat(cormat)
upper_tri <- get_lower_tri(cormat)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# create correlation heatmap
ggheatmap <- ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# sqft_living, sqft_above and grades are highly related.
# price has high correlation with sqft_living, grade, sqft_above, sqft_living15, and bathrooms.
melted_cormat_byValue <- melted_cormat[order(abs(melted_cormat$value), decreasing = T),]
melted_cormat_byValue_price <- melted_cormat_byValue[melted_cormat_byValue$Var1=='price' |
melted_cormat_byValue$Var2=='price',]
## full linear model
full.model <- lm(price~., data = myD)
summary(full.model)
# coef of sqft_basement is NA, and p-value of floor > 0.05
# R^2 = 0.6997, adR^2 = 0.6995
fit_drop_basement_floors <- lm(price~.-sqft_basement-floors, data = myD)
summary(fit_drop_basement_floors)
# R^2 = 0.6997, adR^2 = 0.6995
## simplified model
sim_fit <- lm(price~sqft_living+grade+sqft_above+sqft_living15+bathrooms, data = myD)
summary(sim_fit)
# R^2 = 0.5442, adjR^2 = 0.5441
# select model by adjusted R^2
result_sim_fit <- as.data.frame(round(best(fit_drop_basement_floors, nbest = 3), 4))
result_sim_fit <- result_sim_fit[order(-abs(result_sim_fit$adjr2)),]
head(result_sim_fit)
# So best model by adjusted R^2 is
# price ~ bedrooms + bathrooms + sqft_living + waterfront + view + grade + yr_built + lat
# top models by adjusted R^2 should contain
# sqft_living, waterfront, view, grade, yr_built and lat.
## boxplots for some high-correlated variables and price
boxplot_p_sl <- boxplot(price~sqft_living, data=myD,
main="Price vs. Sqft_living", xlab="Sqft_living", ylab="Price")
boxplot_p_b <- boxplot(price~bathrooms, data=myD,
col=(c("gold","darkgreen")),
main="Price vs. Bathrooms", xlab="Bathrooms", ylab="Price")
boxplot_p_g <- boxplot(price~grade, data=myD,
col=(c("gold","darkgreen")),
main="Price vs. Grade", xlab="Grade", ylab="Price")
#The relationship looks a bit non-linear here
## log price
myD$logP <- log(myD$price)
myD <- myD[,-1]
log_price_model <- lm(logP~.-sqft_basement, data = myD)
summary(log_price_model)
## AIC selection
model.null <- lm(logP~., data = myD)
fit2.AIC <- stepAIC(log_price_model, scope = list(upper = log_price_model, lower = model.null), trace = FALSE)
log_price_model.AIC <- stepAIC(log_price_model, scope = list(upper = log_price_model, lower = model.null), trace = FALSE)
log_price_model
## AIC selection
model.null <- lm(logP~.-sqft_basement, data = myD)
log_price_model.AIC <- stepAIC(log_price_model, scope = list(upper = log_price_model, lower = model.null), trace = FALSE)
log_price_model.AIC$formula
#BIC
log_price_model.BIC <- step(fit2, direction = "backward", k=log(nrow(myD)))
#BIC
log_price_model.BIC <- step(log_price_model, direction = "backward", k=log(nrow(myD)))
log_price_model.BIC$formula
#BIC
log_price_model.BIC <- step(log_price_model, direction = "both", k=log(nrow(myD)))
log_price_model.BIC$formula
#BIC
log_price_model.BIC <- step(model.null, direction = "both", k=log(nrow(myD)))
log_price_model.BIC$formula
myD
head(myD)
#BIC
log_price_model.BIC <- step(log_price_model, direction = "both", k=log(nrow(myD)))
log_price_model.AIC <- stepAIC(log_price_model, scope = list(upper = log_price_model, lower = model.null), trace = FALSE)
log_price_model.AIC$formula
log_price_model.AIC
??stepAIC
summary(log_price_model)
## VIF
vif(myD)
??vif
## VIF
library(car)
vif(myD)
coef(myD)
vif(log_price_model)
## CV
library(caret)
inTrain <- createDataPartition(y = myD[,logP], list = FALSE, p = .8)
head(myD)
inTrain <- createDataPartition(y = myD[,"logP"], list = FALSE, p = .8)
train <- myD[inTrain,]
test <- myD[-inTrain,]
## AIC selection
model.null <- lm(logP~.-sqft_basement, data = myD)
log_price_model.AIC <- stepAIC(log_price_model, scope = list(upper = log_price_model, lower = model.null), trace = FALSE)
log_price_model.AIC$formula
#BIC
log_price_model.BIC <- step(log_price_model, direction = "both", k=log(nrow(myD)))
log_price_model.BIC$formula
#BIC
log_price_model.BIC <- step(log_price_model, direction = "backward", k=log(nrow(myD)))
log_price_model.BIC$formula
#BIC
log_price_model.BIC <- step(log_price_model, direction = "forward", k=log(nrow(myD)))
log_price_model.BIC$formula
#BIC
log_price_model.BIC <- step(log_price_model, direction = "backward", k=log(nrow(myD)))
log_price_model.BIC$formula
log_price_model.AIC <- stepAIC(log_price_model, scope = list(upper = log_price_model, lower = model.null), trace = FALSE)
log_price_model.AIC$formula
log_price_model.AIC
log_price_model
summary(log_price_model.AIC)
knitr::opts_chunk$set(echo = TRUE, cache = T)
setwd("C:/Users/Jin/Dropbox/IIT/2018 FALL/MATH 564/Homework/HW7")
set.seed(999)
url1 <- "http://users.stat.ufl.edu/~rrandles/sta4210/Rclassnotes/data/textdatasets/KutnerData/Chapter%2014%20Data%20Sets/CH14PR14.txt"
myData1 <- read.table(url1)
colnames(myData1)<-c("Y","X1","X2","X3")
fit1 <- glm(Y~.,data=myData1,family=binomial("logit"))
summary(fit1)
exp(coef(fit1)[2])
exp(coef(fit1)[3])
exp(coef(fit1)[4])
predict(fit1, type = "response", newdata = list(X1=55, X2=60, X3=1))
alpha = 0.1
n = nrow(myData1)
zStat <- qnorm(1-alpha/2/2)
fit1.coef <- summary(fit1)$coefficients
x1CI <- cbind(exp(30*(fit1.coef[2,1] - zStat * fit1.coef[2,2])),
exp(30*(fit1.coef[2,1] + zStat * fit1.coef[2,2])))
x1CI
x2CI <- cbind(exp(25*(fit1.coef[3,1] - zStat * fit1.coef[3,2])),
exp(25*(fit1.coef[3,1] + zStat * fit1.coef[3,2])))
x2CI
# library(survey)
fit.coef = summary(fit1)$coef
# anova(fit1)
# vcov(fit1)
# regTermTest(fit1,"X3")$p
# library(aods3)
# fm <- aodql(cbind(m, n - m) ~ seed * root, data = orob2, family = "qbin")
alpha = 0.05
zStar = fit.coef[4,1]/fit.coef[4,2]
zStar <= qnorm(1-alpha/2)
fit.coef[4,4]
fit1.reduced <- glm(Y~X1+X2,data=myData1,family=binomial("logit"))
summary(fit1.reduced)
g2X3 <- anova(fit1.reduced,fit1)$Deviance[2]
alpha <- 0.05
g2X3 < qchisq(1-alpha, 1)
fit2 <- glm(Y~X1+X2+I(X1^2)+I(X2^2)+I(X1*X2),data=myData1,family=binomial("logit"))
summary(fit2)
g2 <- anova(fit1, fit2)$Deviance[2]
alpha <- 0.05
g2 < qchisq(1-alpha, 3)
g2 < qchisq(1-alpha, 3)
g2
qchisq(1-alpha, 3)
summary(fit2)
??pchiq
g2
g2X3
??pchisq
?pchisq
1-pchisq(g2X3, 1)
1-pchisq(g2, 3)
1-pchisq(g2, 1)
g2
fit1
fit3 <- glm(Y~X1+X2,data = myData1,family=binomial("logit"))
g2 <- anova(fit3, fit2)$Deviance[2]
alpha <- 0.05
g2 < qchisq(1-alpha, 3)
g2
1-pchisq(g2, 3)
1-pchisq(g2, 1)
qchisq(1-alpha, 3)
qchisq(1-alpha, 1)
qchisq(1-alpha, 3)
1-pchisq(g2, 3)
1-pchisq(g2X3, 1)
